---
title: "Booze Presentation Visuals"
format: html
editor: visual
jupyter: python3
---

```{python}
# Imports 
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt

# Read in Data

grouped_data_booze = pd.read_csv("../data/grouped_data_booze.csv")

# Graphs for Booze Presentation

# Plot Number of Stores vs Total Sales

slope, intercept = np.polyfit(grouped_data_booze['num_stores'], grouped_data_booze['sum_sale_dollars'], 1) line_of_best_fit = slope * grouped_data_booze['num_stores'] + intercept

plt.scatter(grouped_data_booze['num_stores'], grouped_data_booze['sum_sale_dollars']) 
plt.plot(grouped_data_booze['num_stores'], line_of_best_fit, color='red', label='Line of Best Fit') 
plt.ylabel("Total Sale Dollars (100,000 $ Scale)") 
plt.xlabel("Number of Stores") 
plt.title("Number of Stores Compared to Total Sales") 
plt.show()

# Plot Company Average Monthly Sales vs Number of Stores

gdb = grouped_data_booze.copy() 
gdb['date'] = pd.to_datetime(gdb['date'], errors='coerce')
 gdb['month'] = gdb['date'].dt.to_period('M').astype(str) 
 monthly = gdb.groupby(['company', 'month'], as_index=False)['sum_sale_dollars'].sum() 
 company_avg = monthly.groupby('company', as_index=False)['sum_sale_dollars'].mean().rename(columns={'sum_sale_dollars': 'avg_monthly_sales'}) 
 stores = gdb.groupby('company', as_index=False)['num_stores'].max() 
 company_stats = pd.merge(company_avg, stores, on='company', how='left') 
 company_stats = company_stats.dropna(subset=['num_stores']) 
 plt.figure(figsize=(10, 6)) 
 slope_k, intercept_k = np.polyfit(company_stats['num_stores'], company_stats['avg_monthly_sales'], 1) 
 lobf_k = slope_k * company_stats['num_stores'] + intercept_k plt.scatter(company_stats['num_stores'], company_stats['avg_monthly_sales']) 
 plt.plot(company_stats['num_stores'], lobf_k, color='red', label='Line of Best Fit') 
 plt.ylabel("Average Monthly Sales ($100,000 Scale)") 
 plt.xlabel("Number of Stores") 
 plt.title("Company Average Monthly Sales vs Number of Stores") 
 plt.legend() p
 lt.show()

# Plot total sale dollars over time

grouped_data_graphing = grouped_data_booze.reset_index() 
plot_data = grouped_data_graphing.groupby('date')['sum_sale_dollars'].sum().reset_index() 
plt.bar(plot_data['date'], plot_data['sum_sale_dollars']) 
plt.ylabel("Total Sale Dollars (1 Million $ Scale)") 
plt.xlabel("Date (Month)") 
plt.title("Customer Spending Trend Over Time") 
plt.xticks(rotation=45) 
plt.show()

# Plot total sale dollars over time

plot_data['date'] = pd.to_datetime(plot_data['date'], errors='coerce') 
plot_data['year'] = plot_data['date'].dt.year 
plot_data['month_num'] = plot_data['date'].dt.month 
plot_data['month'] = plot_data['date'].dt.strftime('%b')

# Aggregate and pivot

monthly = (plot_data.groupby(['year', 'month_num', 'month'])['sum_sale_dollars'].sum().reset_index())
pivot = (monthly.pivot(index='month_num', columns='year', values='sum_sale_dollars').reindex(range(1, 13)).sort_index().fillna(0))

month_labels = [pd.Timestamp(2000, m, 1).strftime('%b') for m in pivot.index]

# Remove Oct (10), Nov (11), Dec (12) for 2025
if 2025 in pivot.columns: pivot.loc[[10, 11, 12], 2025] = np.nan
plt.figure(figsize=(10, 6)) for yr in pivot.columns: plt.plot(month_labels, pivot[yr], marker = "o", label=str(yr))
plt.ylabel("Total Sale Dollars (1 Million $ Scale)") 
plt.xlabel("Month") 
plt.title("Customer Spending Trend by Month") 
plt.legend(title='Year')
plt.show()
```