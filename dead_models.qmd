---
title: "DEAD Models"
format: html
editor: visual
jupyter: python3
---

# Set Up
```{r}
library(tidyverse)
DEAD <- read.csv(here::here("data/grouped_data_dead.csv"))
```

```{r}
DEAD <- DEAD |>
  mutate(
    county = as.factor(county),
    alcohol_type = as.factor(alcohol_type),
    year = date
  )

#one-hot encoding
county_dummies <- model.matrix(~ county, data = DEAD)
county_dummies <- county_dummies[, -1]
alcohol_dummies <- model.matrix(~ alcohol_type, data = DEAD)
alcohol_dummies <- alcohol_dummies[, -1]
DEAD <- cbind(DEAD, county_dummies, alcohol_dummies)
```


# Custom Functions:
```{r}
cross_validation_split <- function(dataset, k) {
  set.seed(40313)
  n <- nrow(dataset)
  groups <- 1:k
  assignments <- rep(c(groups), length.out=n)
  assignments <- sample(assignments)
  dataset[["cv_group"]] <- assignments
  return(dataset)
}
```

```{r}
fit_cv <- function(dataset, predictor_cols, response, k=5) {
  df_cv <- cross_validation_split(dataset, k)
  cv_groups <- df_cv$cv_group
  metrics <- c()
  for(i in 1:k) {
    test_set <- df_cv[df_cv$cv_group == i, ]
    train_set <-  df_cv[df_cv$cv_group != i, ]
    X_train <- as.matrix(train_set[, predictor_cols])
    X_train <- cbind(intercept = 1, X_train)
    y_train <- as.matrix(train_set[, response])
    X_test <- as.matrix(test_set[, predictor_cols])
    X_test <- cbind(intercept = 1, X_test)
    y_test <- as.vector(test_set[, response])
    model <- fit_linear_model(X_train, y_train)
    test.predictions <- predict_linear(model, X_test)
    r2 <- calculate_r2(y_test, test.predictions)
    metrics <- c(metrics, r2)
  }
  cv_r2 <- sum(metrics)/k
  return(cv_r2)
}
```

```{r}
fit_linear_model <- function(X, y) {
  XtX <- t(X) %*% X
  XtX_inv <- solve(XtX)
  Xty <- t(X) %*% y
  coefficients <- XtX_inv %*% Xty
  return(list(
    coefficients = as.vector(coefficients),
    feature_names = colnames(X)
  ))
}

#predictions
predict_linear <- function(model, X_new) {
  predictions <- X_new %*% model$coefficients
  return(as.vector(predictions))
}

#R^2: 1 - (SS_res / SS_tot)
calculate_r2 <- function(y_true, y_pred) {
  ss_res <- sum((y_true - y_pred)^2)
  ss_tot <- sum((y_true - mean(y_true))^2)
  r2 <- 1 - (ss_res / ss_tot)
  return(r2)
}
```

# DEAD Models
```{r}
predictor_cols <- c("population", "year")
response <- "sum_sale_dollars"
results <- fit_cv(DEAD, predictor_cols, response, k = 10)
print(paste("CV R^2:", round(results, 4)))
```

```{r}
predictor_cols <- c("population", "alcohol_typeCOCKTAILS", "alcohol_typeGIN", "alcohol_typeLIQUEUR", "alcohol_typeRUM", "alcohol_typeSCHNAPPS", "alcohol_typeSCOTCH","alcohol_typeTEQUILA", "alcohol_typeVODKA", "alcohol_typeWHISKEY")
response <- "sum_sale_dollars"
results <- fit_cv(DEAD, predictor_cols, response, k = 10)
print(paste("CV R^2:", round(results, 4)))
```


```{r}
predictor_cols <- c("population", "year", "alcohol_typeCOCKTAILS", "alcohol_typeGIN", "alcohol_typeLIQUEUR", "alcohol_typeRUM", "alcohol_typeSCHNAPPS", "alcohol_typeSCOTCH","alcohol_typeTEQUILA", "alcohol_typeVODKA", "alcohol_typeWHISKEY")
response <- "sum_sale_dollars"
results <- fit_cv(DEAD, predictor_cols, response, k = 10)
print(paste("CV R^2:", round(results, 4)))
```


Final model:
```{r}
predictor_cols <- c("population", "alcohol_typeCOCKTAILS", "alcohol_typeGIN", "alcohol_typeLIQUEUR", "alcohol_typeRUM", "alcohol_typeSCHNAPPS", "alcohol_typeSCOTCH","alcohol_typeTEQUILA", "alcohol_typeVODKA", "alcohol_typeWHISKEY")
X <- as.matrix(DEAD[, predictor_cols])
X <- cbind(intercept = 1, X)
y <- as.matrix(DEAD[, response])
    
model <- fit_linear_model(X, y)
print(model)
```






# Using Built in Functions
```{r}
library(tidymodels)

DEAD <- DEAD |>
  mutate(
    county = as.factor(county),
    alcohol_type = as.factor(alcohol_type)
  )
```


```{r}
lin_reg <- linear_reg() |>
  set_mode("regression") |>
  set_engine("lm")

#USE THIS SEED FOR CONSISTENCY
set.seed(40313)
DEAD_cv <- vfold_cv(DEAD, v=10)
```

Predict sum Sale Dollars from county, alcohol type

```{r}
DEAD_rec1 <- recipe(sum_sale_dollars ~ county + alcohol_type,
                        data=DEAD) |>
  step_dummy(all_nominal_predictors()) |>
  step_normalize(all_numeric_predictors())


DEAD_cv1 <- lin_reg |>
  fit_resamples(DEAD_rec1,
                resamples = DEAD_cv)

DEAD_cv1 |> collect_metrics()
```


Predict sum Sale Dollars from population and date

```{r}
DEAD_rec2 <- recipe(sum_sale_dollars ~ population + date,
                        data=DEAD) |>
  step_dummy(all_nominal_predictors()) |>
  step_normalize(all_numeric_predictors())


DEAD_cv2 <- lin_reg |>
  fit_resamples(DEAD_rec2,
                resamples = DEAD_cv)

DEAD_cv2 |> collect_metrics()
```


Predict sum Sale Dollars from population and alcohol type
```{r}
DEAD_rec3 <- recipe(sum_sale_dollars ~ population + alcohol_type,
                        data=DEAD) |>
  step_dummy(all_nominal_predictors()) |>
  step_normalize(all_numeric_predictors())


DEAD_cv3 <- lin_reg |>
  fit_resamples(DEAD_rec3,
                resamples = DEAD_cv)

DEAD_cv3 |> collect_metrics()
```

Predict sum Sale Dollars from alcohol type
```{r}
DEAD_rec4 <- recipe(sum_sale_dollars ~ alcohol_type,
                        data=DEAD) |>
  step_dummy(all_nominal_predictors()) |>
  step_normalize(all_numeric_predictors())


DEAD_cv4 <- lin_reg |>
  fit_resamples(DEAD_rec4,
                resamples = DEAD_cv)

DEAD_cv4 |> collect_metrics()
```



Predict sum Sale Dollars from population,alcohol type, and county
```{r}
DEAD_rec5 <- recipe(sum_sale_dollars ~ population + alcohol_type + county,
                        data=DEAD) |>
  step_dummy(all_nominal_predictors()) |>
  step_normalize(all_numeric_predictors())


DEAD_cv5 <- lin_reg |>
  fit_resamples(DEAD_rec3,
                resamples = DEAD_cv)

DEAD_cv5 |> collect_metrics()
```


Predict sum Sale Dollars from population,alcohol type, and date
```{r}

DEAD_rec6 <- recipe(sum_sale_dollars ~ population + alcohol_type + date,
                        data=DEAD) |>
  step_dummy(all_nominal_predictors()) |>
  step_normalize(all_numeric_predictors())


DEAD_cv6 <- lin_reg |>
  fit_resamples(DEAD_rec6,
                resamples = DEAD_cv)

DEAD_cv6 |> collect_metrics()
```