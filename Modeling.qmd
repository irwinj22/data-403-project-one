---
title: "Custom Modeling"
format: html
---

## Set up

```{r}
library(tidyverse)
booze <- read.csv(here::here("data/grouped_data_booze.csv"))
DEAD <- read.csv(here::here("data/grouped_data_dead.csv"))
```

```{r}
#Necessary Custom Function
standardize <- function(x) {
  mean_x <- mean(x)
  sd_x <- sd(x)
  standardized <- (x - mean_x) / sd_x
  return(standardized)
}
```

```{r}
booze <- booze |>
  mutate(
    company = as.factor(company),
    date = as.Date(paste0(date, "-01")),
    year = as.numeric(format(date, "%Y")),
    month = as.numeric(format(date, "%m"))
  )

booze_large_chains <- booze |>
  filter(num_stores >= 5)

DEAD <- read.csv(here::here("grouped_data_dead.csv"))

DEAD <- DEAD |>
  mutate(
    county = as.factor(county),
    alcohol_type = as.factor(alcohol_type),
    year = as.numeric(date)
  )

DEAD <- DEAD |>
  mutate(
    population_scaled = standardize(population),
    year_scaled = standardize(year)
  )

#one-hot encoding
county_dummies <- model.matrix(~ county, data = DEAD)
county_dummies <- county_dummies[, -1]
alcohol_dummies <- model.matrix(~ alcohol_type, data = DEAD)
alcohol_dummies <- alcohol_dummies[, -1]
DEAD <- cbind(DEAD, county_dummies, alcohol_dummies)
```

# Custom Functions:

```{r}
cross_validation_split <- function(dataset, k) {
  set.seed(40313)
  n <- nrow(dataset)
  groups <- 1:k
  assignments <- rep(c(groups), length.out=n)
  assignments <- sample(assignments)
  dataset[["cv_group"]] <- assignments
  return(dataset)
}
```

```{r}
fit_cv <- function(dataset, predictor_cols, response, k=5) {
  df_cv <- cross_validation_split(dataset, k)
  cv_groups <- df_cv$cv_group
  metrics <- c()
  for(i in 1:k) {
    test_set <- df_cv[df_cv$cv_group == i, ]
    train_set <-  df_cv[df_cv$cv_group != i, ]
    X_train <- as.matrix(train_set[, predictor_cols])
    X_train <- cbind(intercept = 1, X_train)
    y_train <- as.matrix(train_set[, response])
    X_test <- as.matrix(test_set[, predictor_cols])
    X_test <- cbind(intercept = 1, X_test)
    y_test <- as.vector(test_set[, response])
    model <- fit_linear_model(X_train, y_train)
    test.predictions <- predict_linear(model, X_test)
    r2 <- calculate_r2(y_test, test.predictions)
    metrics <- c(metrics, r2)
  }
  cv_r2 <- sum(metrics)/k
  return(cv_r2)
}
```

```{r}
fit_linear_model <- function(X, y) {
  XtX <- t(X) %*% X
  XtX_inv <- solve(XtX)
  Xty <- t(X) %*% y
  coefficients <- XtX_inv %*% Xty
  return(list(
    coefficients = as.vector(coefficients),
    feature_names = colnames(X)
  ))
}

#predictions
predict_linear <- function(model, X_new) {
  predictions <- X_new %*% model$coefficients
  return(as.vector(predictions))
}

#R^2: 1 - (SS_res / SS_tot)
calculate_r2 <- function(y_true, y_pred) {
  ss_res <- sum((y_true - y_pred)^2)
  ss_tot <- sum((y_true - mean(y_true))^2)
  r2 <- 1 - (ss_res / ss_tot)
  return(r2)
}
#MSE
calculate_mse <- function(y_true, y_pred) {
  squared_errors <- (y_true - y_pred)^2
  mse <- mean(squared_errors)
  return(mse)
}

#RMSE
calculate_rmse <- function(y_true, y_pred) {
  mse <- calculate_mse(y_true, y_pred)
  rmse <- sqrt(mse)
  return(rmse)
}
```

# Booze Models

```{r}
predictor_cols <- c("num_stores", "year", "month")
response <- "sum_sale_dollars"
results <- fit_cv(booze, predictor_cols, response, k = 10)
print(paste("CV R^2:", round(results, 4)))
```

```{r}
predictor_cols <- c("num_stores", "year", "month")
response <- "sum_sale_dollars"
results <- fit_cv(booze_large_chains, predictor_cols, response, k = 10)
print(paste("CV R^2:", round(results, 4)))
```

```{r}
X <- as.matrix(booze[, predictor_cols])
X <- cbind(intercept = 1, X)
y <- as.matrix(booze[, response])
    
model <- fit_linear_model(X, y)
predictions <- predict_linear(model, X)
print(model)

mse_booze <- calculate_mse(y, predictions)
rmse_booze <- calculate_rmse(y, predictions)
r2_booze <- calculate_r2(y, predictions)

print(paste("MSE:", round(mse_booze, 2)))
print(paste("RMSE:", round(rmse_booze, 2)))
print(paste("R^2:", round(r2_booze, 4)))
```

# DEAD Models

```{r}
predictor_cols <- c("population_scaled", "year_scaled")
response <- "sum_sale_dollars"
results <- fit_cv(DEAD, predictor_cols, response, k = 10)
print(paste("CV R^2:", round(results, 4)))
```

```{r}
predictor_cols <- c("population_scaled", "alcohol_typeCOCKTAILS", "alcohol_typeGIN", 
                    "alcohol_typeLIQUEUR", "alcohol_typeRUM", "alcohol_typeSCHNAPPS", 
                    "alcohol_typeSCOTCH", "alcohol_typeTEQUILA", "alcohol_typeVODKA", 
                    "alcohol_typeWHISKEY")
response <- "sum_sale_dollars"
results <- fit_cv(DEAD, predictor_cols, response, k = 10)
print(paste("CV R^2:", round(results, 4)))
```

```{r}
predictor_cols <- c("population_scaled", "year_scaled", "alcohol_typeCOCKTAILS", 
                    "alcohol_typeGIN", "alcohol_typeLIQUEUR", "alcohol_typeRUM", 
                    "alcohol_typeSCHNAPPS", "alcohol_typeSCOTCH", "alcohol_typeTEQUILA", 
                    "alcohol_typeVODKA", "alcohol_typeWHISKEY")
response <- "sum_sale_dollars"
results <- fit_cv(DEAD, predictor_cols, response, k = 10)
print(paste("CV R^2:", round(results, 4)))
```

Final model:

```{r}
predictor_cols <- c("population_scaled", "alcohol_typeCOCKTAILS", "alcohol_typeGIN", 
                    "alcohol_typeLIQUEUR", "alcohol_typeRUM", "alcohol_typeSCHNAPPS", 
                    "alcohol_typeSCOTCH", "alcohol_typeTEQUILA", "alcohol_typeVODKA", 
                    "alcohol_typeWHISKEY")
X <- as.matrix(DEAD[, predictor_cols])
X <- cbind(intercept = 1, X)
y <- as.matrix(DEAD[, response])
    
model <- fit_linear_model(X, y)
predictions <- predict_linear(model, X)
print(model)

mse_dead <- calculate_mse(y, predictions)
rmse_dead <- calculate_rmse(y, predictions)
r2_dead <- calculate_r2(y, predictions)
print(paste("MSE:", round(mse_dead, 2)))
print(paste("RMSE:", round(rmse_dead, 2)))
print(paste("R^2:", round(r2_dead, 4)))
```
