---
title: "Custom Modeling"
format: html
---

## Custom Functions:
```{r}
cross_validation_split <- function(dataset, k) {
  set.seed(40313)
  n <- nrow(dataset)
  groups <- 1:k
  assignments <- rep(c(groups), length.out=n)
  assignments <- sample(assignments)
  dataset[["cv_group"]] <- assignments
  return(dataset)
}
```

```{r}
fit_cv <- function(dataset, predictor_cols, response, k=5) {
  df_cv <- cross_validation_split(dataset, k)
  cv_groups <- df_cv$cv_group
  metrics <- c()
  for(i in 1:k) {
    test_set <- df_cv[df_cv$cv_group == i, ]
    train_set <-  df_cv[df_cv$group != i, ]
    model <- fit_linear_model(train_set[, predictor_cols])
    test.predictions <- predict_linear(model, test_set[, predictor_cols])
    r2 <- calculate_r2(test_set[, response], test.predictions)
    metrics <- c(metrics, r2)
  }
  cv_r2 <- sum(metrics)/k
}
```



```{r}
#fit linear regression
fit_linear_model <- function(X, y) {
  XtX <- t(X) %*% X
  XtX_inv <- solve(XtX)
  Xty <- t(X) %*% y
  coefficients <- XtX_inv %*% Xty
  return(list(
    coefficients = as.vector(coefficients),
    feature_names = colnames(X)
  ))
}

#predictions
predict_linear <- function(model, X_new) {
  predictions <- X_new %*% model$coefficients
  return(as.vector(predictions))
}

#R^2: 1 - (SS_res / SS_tot)
calculate_r2 <- function(y_true, y_pred) {
  ss_res <- sum((y_true - y_pred)^2)
  ss_tot <- sum((y_true - mean(y_true))^2)
  r2 <- 1 - (ss_res / ss_tot)
  return(r2)
}

#RMSE
calculate_rmse <- function(y_true, y_pred) {
  rmse <- sqrt(mean((y_true - y_pred)^2))
  return(rmse)
}

#MAE
calculate_mae <- function(y_true, y_pred) {
  mae <- mean(abs(y_true - y_pred))
  return(mae)
}


#this is the matrix preperation: 
grouped_data_booze <- read.csv("grouped_data_booze.csv")
data_prep_matrix <- grouped_data_booze |>
  mutate(
    date = as.Date(paste0(date, "-01")),
    year = as.numeric(format(date, "%Y")),
    month = as.numeric(format(date, "%m"))
  )
company_counts <- data_prep_matrix |>
  count(company) |>
  filter(n >= 20)
data_prep_matrix <- data_prep_matrix |>
  filter(company %in% company_counts$company)
create_matrix <- function(data, response_var = "sum_sale_dollars") {
  if (response_var == "sum_sale_dollars") {
    features <- data |>
      select(year, month, bottles_sold, num_transactions, num_stores)
  } else if (response_var == "avg_sale_dollars") {
    features <- data |>
      select(year, month, bottles_sold, num_transactions, num_stores)
  }
  #one-hot encoding
  company_dummies <- model.matrix(~ company, data = data)
  company_dummies <- company_dummies[, -1]
  X <- cbind(features, company_dummies)
  X <- cbind(intercept = 1, X)
  X <- as.matrix(X)
  y <- as.matrix(data[[response_var]])
  return(list(
    X = X,
    y = y,
    feature_names = colnames(X)
  ))
}
```

