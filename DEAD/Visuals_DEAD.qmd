---
title: "Dead Presentation Visuals"
format: html
editor: visual
jupyter: python3
---

```{python}
# Imports
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Read in Data
grouped_data_dead = pd.read_csv("data/grouped_data_dead.csv")

# Graphs for Dead Presentation

grouped_data_graphing = grouped_data_dead.reset_index()

# Plot Total Sales by Alcohol type using Pie chart
plot_data = (
    grouped_data_graphing
    .groupby('alcohol_type')['sum_sale_dollars']
    .sum()
    .reset_index()
    .sort_values(by='sum_sale_dollars', ascending=False)
)
total = plot_data['sum_sale_dollars'].sum()
plot_data['pct'] = plot_data['sum_sale_dollars'] / total * 100
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(plot_data['sum_sale_dollars'], labels=None, autopct='%1.1f%%', startangle=90)
ax.set_title("Total Sales by Alcohol Type", fontsize=14)
ax.axis('equal')
threshold = 6.0
large_font = 12
small_font = 6
for at, pct in zip(autotexts, plot_data['pct']):
    at.set_fontsize(large_font if pct >= threshold else small_font)
ax.legend(wedges, plot_data['alcohol_type'], title='Alcohol Type', loc='center left', bbox_to_anchor=(1, 0.5), fontsize=11)
plt.show()

# Plot Total Sale Dollars to Each County
plot_data_2 = grouped_data_graphing.groupby('county')['sum_sale_dollars'].sum().reset_index().sort_values(by='sum_sale_dollars')
# Plot only the 25 highest Counties
plt.bar(plot_data_2['county'].tail(25), plot_data_2['sum_sale_dollars'].tail(25))
plt.ylabel("Total Sale Dollars (10 Million $ Scale)")
plt.xlabel("County")
plt.title("County Spending (Top 25 Counties)")
plt.xticks(rotation=90)
plt.show()


# Plot Total Sale Dollars to Each County
plot_data_3 = grouped_data_graphing.groupby('county')['population'].sum().reset_index().sort_values(by='population')
# Plot only the 25 highest Counties
plt.scatter(plot_data_3['county'].tail(25), plot_data_3['population'].tail(25))
plt.ylabel("Total Population")
plt.xlabel("County")
plt.title("County Populations (Top 25 Counties)")
plt.xticks(rotation=90)
plt.show()

# Plot only the 25 highest Counties - Overlap Population and Sale Dollars
top25_sales = plot_data_2.tail(25).copy()
pop_by_county = grouped_data_graphing.groupby('county')['population'].mean().reset_index()
top25 = top25_sales.merge(pop_by_county, on='county', how='left')

# Plot bars for sales and overlay population
fig, ax = plt.subplots(figsize=(12, 8))
indices = range(len(top25))
bars = ax.bar(indices, top25['sum_sale_dollars'], color='C0')
ax.set_xticks(indices)
ax.set_xticklabels(top25['county'], rotation=90, fontsize=12)
ax.set_ylabel("Total Sale Dollars (10 Million $ Scale)", fontsize=18)
ax.set_xlabel("County", fontsize=18)
ax.set_title("County Spending (Top 25 Counties) with Population Overlay", fontsize=20)
# Secondary axis for population
ax2 = ax.twinx()
ax2.scatter(indices, top25['population'], color='red', zorder=5)
ax2.set_ylabel('Population', color='red', fontsize=18)
# Increase tick label sizes for both axes
ax.tick_params(axis='x', labelsize=16)
ax.tick_params(axis='y', labelsize=16)
ax2.tick_params(axis='y', labelsize=16)
plt.show()

# Find the mean sales per person for each county
Sales_Per_Person = grouped_data_dead.groupby(['county','date']).agg(
    sum_sale_dollars = ('sum_sale_dollars', 'sum'),
    average_population_per_year = ('population', 'mean'))

average_per_county = Sales_Per_Person['sum_sale_dollars'] / Sales_Per_Person['average_population_per_year']
print()

```