---
title: "Data Cleaning DEAD"
format: html
editor: visual
jupyter: python3
---

## Import

```{r}
library(tidyverse)
```

Pulling in population

```{r}
population <- read.csv(here::here("data/City_Population_in_Iowa_by_County_and_Year.csv"))
```

```{r}
population2 <- population |>
  select(County, City, Year, Estimate) |>
  mutate(DATE = as.Date(Year, format="%B %d %Y"),
         Year = year(DATE)) |>
  group_by(County, Year) |>
  summarize(Population = sum(Estimate)) |>
  filter(Year >= 2020)
```

```{r}
write.csv(population2, here::here("data/Population_in_Iowa_Transformed.csv"))
```

# Feature Engeenering for Client B

```{r}
client_b <- read.csv(here::here("../data/dead.csv"))
```

```{r}
client_b2 <- client_b |>
  mutate(
    alcohol_type = case_when(
      str_detect(category_name, "WHISK") ~ "WHISKEY",
      str_detect(category_name, "VODKA") ~ "VODKA",
      str_detect(category_name, "RUM") ~ "RUM",
      str_detect(category_name, "TEQUILA") ~ "TEQUILA",
      str_detect(category_name, "SCHNAPPS") ~ "SCHNAPPS",
      str_detect(category_name, "GIN") ~ "GIN",
      str_detect(category_name, "BRANDIES") ~ "BRANDY",
      str_detect(category_name, "LIQUEURS") ~ "LIQUEUR",
      str_detect(category_name, "COCKTAIL") ~ "COCKTAILS",
      str_detect(category_name, "SCOTCH") ~ "SCOTCH",
      TRUE ~ NA
    )
  )

write.csv(client_b2, here::here("../data/dead_transformed.csv"))

```

```{python}
# imports
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Group and aggregate columns for DEAD
data = pd.read_csv("../data/dead_transformed.csv")
pop_data = pd.read_csv('../data/Population_in_Iowa_Transformed.csv')

data['county'] = data['county'].astype(str).str.strip().str.lower()
pop_data['County'] = pop_data['County'].astype(str).str.strip().str.lower()
data['date'] = pd.to_datetime(data['date'], errors='coerce')
data['date'] = data['date'].dt.strftime('%Y').astype(int)
# Ensure pop_data has one row per county-year and use the average Population for that county-year
if {'County', 'Year', 'Population'}.issubset(set(pop_data.columns)):
  pop_data = pop_data.groupby(['County', 'Year'], as_index=False)['Population'].mean()
else:
  pass
combined_data =  pd.merge(data, pop_data, left_on = (['county', 'date']), right_on= (['County', 'Year']))
# Ensure that every row for the same county and year has the same Population value
combined_data['Population'] = combined_data.groupby(['county', 'date'])['Population'].transform('mean')
grouped_data_dead = combined_data.groupby(['county', 'date','alcohol_type']).agg(
  sum_sale_dollars = ('sale_dollars', 'sum'),
  avg_sale_dollars = ('sale_dollars', 'mean'),
  # use the county-year Population as a single value
  population = ('Population', 'first')
)
print(grouped_data_dead)

grouped_data_dead.to_csv("../data/grouped_data_dead.csv", index=True)
```

```{python}
# Total Sales by Each Catagory of Alcohol
grouped_data_graphing = grouped_data_dead.reset_index()
plot_data = grouped_data_graphing.groupby('alcohol_type')['sum_sale_dollars'].sum().reset_index().sort_values(by='sum_sale_dollars')
plt.bar(plot_data['alcohol_type'], plot_data['sum_sale_dollars'])
plt.ylabel("Total Sale Dollars (10 Million $ Scale)")
plt.xlabel("Alcohol Type")
plt.title("Total Sales by Alcohol Type")
plt.xticks(rotation = 45)
plt.show()

# Plot Total Sale Dollars to Each County
plot_data_2 = grouped_data_graphing.groupby('county')['sum_sale_dollars'].sum().reset_index().sort_values(by='sum_sale_dollars')
plt.bar(plot_data_2['county'], plot_data_2['sum_sale_dollars'])
plt.ylabel("Total Sale Dollars (10 Million $ Scale)")
plt.xlabel("County")
plt.title("County Spending")
plt.xticks(rotation=90)
plt.show()

# Plot only the 25 highest Counties
plt.bar(plot_data_2['county'].tail(25), plot_data_2['sum_sale_dollars'].tail(25))
plt.ylabel("Total Sale Dollars (10 Million $ Scale)")
plt.xlabel("County")
plt.title("County Spending (Top 25 Counties)")
plt.xticks(rotation=90)
plt.show()
```